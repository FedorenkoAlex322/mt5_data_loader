#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ó–∞–≤–∞–Ω—Ç–∞–∂—É–≤–∞—á —ñ—Å—Ç–æ—Ä–∏—á–Ω–∏—Ö –¥–∞–Ω–∏—Ö –¥–ª—è –±–∞–≥–∞—Ç–æ–ø–∞—Ä–Ω–æ—ó —Ç–æ—Ä–≥–æ–≤–æ—ó —Å–∏—Å—Ç–µ–º–∏
–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –¥–∞–Ω—ñ –∑ –ª—é—Ç–æ–≥–æ 2025 —Ä–æ–∫—É –ø–æ –≤—Å—ñ—Ö –∞–∫—Ç–∏–≤–Ω–∏—Ö –≤–∞–ª—é—Ç–Ω–∏—Ö –ø–∞—Ä–∞—Ö —Ç–∞ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞—Ö
"""

import sys
import os
import time
import logging
import requests
import psycopg2
from psycopg2.extras import execute_values
from datetime import datetime, timedelta, timezone
import json
from typing import List, Dict, Optional, Tuple
import signal
from concurrent.futures import ThreadPoolExecutor, as_completed

# –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –Ω–æ–≤—É –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é
from real_config import (
    get_active_config, get_all_combinations, get_enabled_pairs,
    TIMEFRAMES, CURRENCY_PAIRS, ACTIVE_TIMEFRAMES
)

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–µ—Ä—ñ–æ–¥—É –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
START_DATE = '2025-07-01'  # –ü–æ—á–∞—Ç–æ–∫ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
END_DATE = '2025-07-07'    # –ö—ñ–Ω–µ—Ü—å –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è (–¥–æ —Å—å–æ–≥–æ–¥–Ω—ñ)

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
BATCH_SIZE = 5000          # –ú–∞–∫—Å–∏–º—É–º —Å–≤—ñ—á–æ–∫ –∑–∞ –æ–¥–∏–Ω –∑–∞–ø–∏—Ç –¥–æ OANDA (–Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –∑ from+to)
MAX_WORKERS = 5            # –ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–∞—Ä–∞–ª–µ–ª—å–Ω–∏—Ö –ø–æ—Ç–æ–∫—ñ–≤ (–∑–º–µ–Ω—à–µ–Ω–æ –¥–ª—è —Å—Ç–∞–±—ñ–ª—å–Ω–æ—Å—Ç—ñ)
REQUEST_DELAY = 2          # –ó–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ –∑–∞–ø–∏—Ç–∞–º–∏ (—Å–µ–∫—É–Ω–¥–∏) (–∑–±—ñ–ª—å—à–µ–Ω–æ –¥–ª—è —Å—Ç–∞–±—ñ–ª—å–Ω–æ—Å—Ç—ñ)

class HistoricalDataLoader:
    """–ó–∞–≤–∞–Ω—Ç–∞–∂—É–≤–∞—á —ñ—Å—Ç–æ—Ä–∏—á–Ω–∏—Ö –¥–∞–Ω–∏—Ö"""
    
    def __init__(self):
        self.config = get_active_config()
        self.setup_logging()
        
        self.db_connection = None
        self.combinations = get_all_combinations()
        self.stats = {
            'total_combinations': len(self.combinations),
            'completed': 0,
            'total_candles_loaded': 0,
            'total_candles_skipped': 0,
            'errors': 0
        }
        
        # OANDA API –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
        self.oanda_session = requests.Session()
        self.oanda_session.headers.update({
            'Authorization': f"Bearer {self.config['oanda']['api_key']}",
            'Content-Type': 'application/json'
        })
        
        self.logger.info("üöÄ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∑–∞–≤–∞–Ω—Ç–∞–∂—É–≤–∞—á–∞ —ñ—Å—Ç–æ—Ä–∏—á–Ω–∏—Ö –¥–∞–Ω–∏—Ö")
        self.logger.info(f"üìÖ –ü–µ—Ä—ñ–æ–¥: {START_DATE} - {END_DATE}")
        self.logger.info(f"üî¢ –ö–æ–º–±—ñ–Ω–∞—Ü—ñ–π: {len(self.combinations)}")
    
    def setup_logging(self):
        """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è"""
        # –°—Ç–≤–æ—Ä—é—î–º–æ –ª–æ–≥–≥–µ—Ä
        self.logger = logging.getLogger('HistoricalDataLoader')
        self.logger.setLevel(logging.INFO)
        
        # –§–æ—Ä–º–∞—Ç—Ç–µ—Ä
        formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
        
        # File handler
        file_handler = logging.FileHandler('historical_data_loader.log', encoding='utf-8')
        file_handler.setFormatter(formatter)
        self.logger.addHandler(file_handler)
        
        # Console handler
        console_handler = logging.StreamHandler(sys.stdout)
        console_handler.setFormatter(formatter)
        self.logger.addHandler(console_handler)
    
    def connect_to_database(self):
        """–ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö"""
        try:
            db_config = self.config['database']
            self.db_connection = psycopg2.connect(
                host=db_config['host'],
                port=db_config['port'],
                database=db_config['database'],
                user=db_config['user'],
                password=db_config['password']
            )
            self.db_connection.autocommit = False
            
            # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ UTC
            cursor = self.db_connection.cursor()
            cursor.execute("SET timezone = 'UTC'")
            cursor.close()
            
            self.logger.info("‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ë–î: {e}")
            return False
    
    def check_existing_data(self, combination: Dict, start_date: str, end_date: str) -> Tuple[int, datetime, datetime]:
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —ñ—Å–Ω—É—é—á—ñ –¥–∞–Ω—ñ —ñ –≤–∏–∑–Ω–∞—á–∞—î —â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏"""
        try:
            cursor = self.db_connection.cursor()
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —ñ—Å–Ω—É—é—á–∏—Ö –∑–∞–ø–∏—Å—ñ–≤
            count_query = """
                SELECT COUNT(*), MIN(timestamp), MAX(timestamp)
                FROM market_data.candles
                WHERE symbol_id = %s AND timeframe_id = %s
                AND timestamp >= %s AND timestamp <= %s
            """
            
            cursor.execute(count_query, (
                combination['symbol_id'],
                combination['timeframe_id'],
                start_date,
                end_date
            ))
            
            result = cursor.fetchone()
            cursor.close()
            
            existing_count = result[0] if result[0] else 0
            min_time = result[1] if result[1] else None
            max_time = result[2] if result[2] else None
            
            return existing_count, min_time, max_time
            
        except Exception as e:
            self.logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —ñ—Å–Ω—É—é—á–∏—Ö –¥–∞–Ω–∏—Ö: {e}")
            return 0, None, None
    
    def fetch_oanda_data(self, combination: Dict, start_time: str, end_time: str) -> List[Dict]:
        """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ OANDA API"""
        try:
            # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ from + to –ë–ï–ó count (–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è OANDA API)
            params = {
                'granularity': combination['oanda_format'],
                'from': start_time,
                'to': end_time
            }
            
            url = f"{self.config['oanda']['api_url']}/v3/instruments/{combination['symbol']}/candles"
            
            self.logger.debug(f"üì• {combination['symbol']} {combination['timeframe']}: –∑–∞–ø–∏—Ç {start_time} ‚Üí {end_time}")
            
            response = self.oanda_session.get(url, params=params, timeout=30)
            
            # –î–æ–¥–∞—î–º–æ –∑–∞—Ç—Ä–∏–º–∫—É
            time.sleep(REQUEST_DELAY)
            
            if response.status_code == 200:
                data = response.json()
                candles = data.get('candles', [])
                
                # –§—ñ–ª—å—Ç—Ä—É—î–º–æ —Ç—ñ–ª—å–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ñ —Å–≤—ñ—á–∫–∏
                complete_candles = [c for c in candles if c.get('complete', True)]
                
                self.logger.debug(f"üìä {combination['symbol']} {combination['timeframe']}: –æ—Ç—Ä–∏–º–∞–Ω–æ {len(complete_candles)} —Å–≤—ñ—á–æ–∫")
                
                return complete_candles
            else:
                # –î–µ—Ç–∞–ª—å–Ω–µ –ª–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ–º–∏–ª–∫–∏
                try:
                    error_data = response.json()
                    self.logger.error(f"‚ùå OANDA API –ø–æ–º–∏–ª–∫–∞ {response.status_code} –¥–ª—è {combination['symbol']} {combination['timeframe']}: {error_data}")
                except:
                    self.logger.error(f"‚ùå OANDA API –ø–æ–º–∏–ª–∫–∞ {response.status_code} –¥–ª—è {combination['symbol']} {combination['timeframe']}")
                return []
                
        except Exception as e:
            self.logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑ OANDA: {e}")
            return []
    
    def parse_oanda_time(self, time_str: str) -> datetime:
        """–ü–∞—Ä—Å–∏–Ω–≥ —á–∞—Å—É OANDA –≤ UTC —Ñ–æ—Ä–º–∞—Ç"""
        try:
            if '.' in time_str:
                date_part, microsec_part = time_str.split('.')
                microsec_part = microsec_part[:6].ljust(6, '0')
                time_str = f"{date_part}.{microsec_part}Z"
            
            time_str = time_str.replace('Z', '+00:00')
            return datetime.fromisoformat(time_str)
            
        except Exception as e:
            self.logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É —á–∞—Å—É: {time_str}, {e}")
            raise
    
    def prepare_candle_data(self, candles: List[Dict], combination: Dict) -> List[tuple]:
        """–ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–∏—Ö —Å–≤—ñ—á–æ–∫ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –≤ –ë–î"""
        prepared_data = []
        
        for candle in candles:
            try:
                timestamp = self.parse_oanda_time(candle['time'])
                
                mid_data = candle.get('mid', {})
                open_price = float(mid_data.get('o', 0))
                high_price = float(mid_data.get('h', 0))
                low_price = float(mid_data.get('l', 0))
                close_price = float(mid_data.get('c', 0))
                volume = int(candle.get('volume', 0))
                
                record = (
                    combination['symbol_id'],
                    combination['timeframe_id'],
                    timestamp,
                    open_price,
                    high_price,
                    low_price,
                    close_price,
                    volume
                )
                
                prepared_data.append(record)
                
            except Exception as e:
                self.logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ —Å–≤—ñ—á–∫–∏: {e}")
                continue
        
        return prepared_data
    
    def insert_candles_to_db(self, candle_data: List[tuple]) -> int:
        """–í—Å—Ç–∞–≤–∫–∞ —Å–≤—ñ—á–æ–∫ –≤ –ë–î –∑ —ñ–≥–Ω–æ—Ä—É–≤–∞–Ω–Ω—è–º –¥—É–±–ª—ñ–≤"""
        if not candle_data:
            return 0
        
        try:
            cursor = self.db_connection.cursor()
            
            insert_query = """
                INSERT INTO market_data.candles 
                (symbol_id, timeframe_id, timestamp, open, high, low, close, volume)
                VALUES %s
                ON CONFLICT (symbol_id, timeframe_id, timestamp) DO NOTHING
            """
            
            execute_values(cursor, insert_query, candle_data, page_size=1000)
            
            # –û—Ç—Ä–∏–º—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ä–µ–∞–ª—å–Ω–æ –≤—Å—Ç–∞–≤–ª–µ–Ω–∏—Ö –∑–∞–ø–∏—Å—ñ–≤
            inserted_count = cursor.rowcount
            
            self.db_connection.commit()
            cursor.close()
            
            return inserted_count
            
        except Exception as e:
            self.logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ –≤ –ë–î: {e}")
            self.db_connection.rollback()
            return 0
    
    def load_combination_data(self, combination: Dict) -> Dict:
        """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –¥–ª—è –æ–¥–Ω—ñ—î—ó –∫–æ–º–±—ñ–Ω–∞—Ü—ñ—ó –ø–∞—Ä–∞/—Ç–∞–π–º—Ñ—Ä–µ–π–º"""
        start_time = time.time()
        
        try:
            self.logger.info(f"üì• –ü–æ—á–∞—Ç–æ–∫ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è {combination['symbol']} {combination['timeframe']}")
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —ñ—Å–Ω—É—é—á—ñ –¥–∞–Ω—ñ
            existing_count, min_time, max_time = self.check_existing_data(
                combination, START_DATE, END_DATE
            )
            
            self.logger.info(f"üìä {combination['symbol']} {combination['timeframe']}: —ñ—Å–Ω—É—î {existing_count} –∑–∞–ø–∏—Å—ñ–≤")
            
            # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –ø–µ—Ä—ñ–æ–¥–∏ –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
            start_dt = datetime.fromisoformat(START_DATE).replace(tzinfo=timezone.utc)
            end_dt = datetime.fromisoformat(END_DATE).replace(tzinfo=timezone.utc)
            
            total_loaded = 0
            total_skipped = 0
            
            # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –±–ª–æ–∫–∞–º–∏
            current_start = start_dt
            
            while current_start < end_dt:
                # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –∫—ñ–Ω–µ—Ü—å –±–ª–æ–∫—É (–º–∞–∫—Å–∏–º—É–º 7 –¥–Ω—ñ–≤ –¥–ª—è —Å—Ç–∞–±—ñ–ª—å–Ω–æ—Å—Ç—ñ)
                current_end = min(current_start + timedelta(days=7), end_dt)
                
                # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –±–ª–æ–∫ –∑ OANDA
                candles = self.fetch_oanda_data(
                    combination,
                    current_start.isoformat().replace('+00:00', 'Z'),
                    current_end.isoformat().replace('+00:00', 'Z')
                )
                
                if candles:
                    # –ü—ñ–¥–≥–æ—Ç–æ–≤–ª—è—î–º–æ –¥–∞–Ω—ñ
                    prepared_data = self.prepare_candle_data(candles, combination)
                    
                    # –í—Å—Ç–∞–≤–ª—è—î–º–æ –≤ –ë–î
                    inserted_count = self.insert_candles_to_db(prepared_data)
                    
                    total_loaded += inserted_count
                    total_skipped += len(prepared_data) - inserted_count
                    
                    self.logger.info(f"üìà {combination['symbol']} {combination['timeframe']}: {current_start.date()} - {current_end.date()}: +{inserted_count} —Å–≤—ñ—á–æ–∫")
                
                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –±–ª–æ–∫—É
                current_start = current_end
            
            duration = time.time() - start_time
            
            result = {
                'symbol': combination['symbol'],
                'timeframe': combination['timeframe'],
                'loaded': total_loaded,
                'skipped': total_skipped,
                'duration': duration,
                'success': True
            }
            
            self.logger.info(f"‚úÖ {combination['symbol']} {combination['timeframe']}: –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ {duration:.1f}—Å, +{total_loaded} —Å–≤—ñ—á–æ–∫")
            
            return result
            
        except Exception as e:
            self.logger.error(f"‚ùå {combination['symbol']} {combination['timeframe']}: –ø–æ–º–∏–ª–∫–∞ - {e}")
            return {
                'symbol': combination['symbol'],
                'timeframe': combination['timeframe'],
                'loaded': 0,
                'skipped': 0,
                'duration': time.time() - start_time,
                'success': False,
                'error': str(e)
            }
    
    def run_parallel_loading(self):
        """–ü–∞—Ä–∞–ª–µ–ª—å–Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤—Å—ñ—Ö –∫–æ–º–±—ñ–Ω–∞—Ü—ñ–π"""
        self.logger.info(f"üöÄ –ü–æ—á–∞—Ç–æ–∫ –ø–∞—Ä–∞–ª–µ–ª—å–Ω–æ–≥–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑ {MAX_WORKERS} –ø–æ—Ç–æ–∫–∞–º–∏")
        
        results = []
        
        with ThreadPoolExecutor(max_workers=MAX_WORKERS) as executor:
            # –ó–∞–ø—É—Å–∫–∞—î–º–æ –∑–∞–≤–¥–∞–Ω–Ω—è
            future_to_combination = {
                executor.submit(self.load_combination_data, combination): combination
                for combination in self.combinations
            }
            
            # –ó–±–∏—Ä–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
            for future in as_completed(future_to_combination):
                combination = future_to_combination[future]
                try:
                    result = future.result()
                    results.append(result)
                    
                    self.stats['completed'] += 1
                    if result['success']:
                        self.stats['total_candles_loaded'] += result['loaded']
                        self.stats['total_candles_skipped'] += result['skipped']
                    else:
                        self.stats['errors'] += 1
                    
                    # –ü–æ–∫–∞–∑—É—î–º–æ –ø—Ä–æ–≥—Ä–µ—Å
                    progress = (self.stats['completed'] / self.stats['total_combinations']) * 100
                    self.logger.info(f"üìä –ü—Ä–æ–≥—Ä–µ—Å: {self.stats['completed']}/{self.stats['total_combinations']} ({progress:.1f}%)")
                    
                except Exception as e:
                    self.logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ –ø–æ—Ç–æ—Ü—ñ –¥–ª—è {combination['symbol']} {combination['timeframe']}: {e}")
                    self.stats['errors'] += 1
        
        return results
    
    def print_final_report(self, results: List[Dict]):
        """–î—Ä—É–∫ —Ñ—ñ–Ω–∞–ª—å–Ω–æ–≥–æ –∑–≤—ñ—Ç—É"""
        self.logger.info("\n" + "="*80)
        self.logger.info("üìã –§–Ü–ù–ê–õ–¨–ù–ò–ô –ó–í–Ü–¢ –ó–ê–í–ê–ù–¢–ê–ñ–ï–ù–ù–Ø –Ü–°–¢–û–†–ò–ß–ù–ò–• –î–ê–ù–ò–•")
        self.logger.info("="*80)
        
        # –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.logger.info(f"üìÖ –ü–µ—Ä—ñ–æ–¥: {START_DATE} - {END_DATE}")
        self.logger.info(f"üî¢ –ö–æ–º–±—ñ–Ω–∞—Ü—ñ–π: {self.stats['total_combinations']}")
        self.logger.info(f"‚úÖ –£—Å–ø—ñ—à–Ω–æ: {self.stats['completed'] - self.stats['errors']}")
        self.logger.info(f"‚ùå –ü–æ–º–∏–ª–æ–∫: {self.stats['errors']}")
        self.logger.info(f"üìà –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –Ω–æ–≤–∏—Ö —Å–≤—ñ—á–æ–∫: {self.stats['total_candles_loaded']:,}")
        self.logger.info(f"‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ (–¥—É–±–ª—ñ): {self.stats['total_candles_skipped']:,}")
        
        # –î–µ—Ç–∞–ª—ñ –ø–æ –ø–∞—Ä–∞–º
        self.logger.info("\nüìä –î–ï–¢–ê–õ–Ü –ü–û –ü–ê–†–ê–ú:")
        self.logger.info("-" * 80)
        
        # –ì—Ä—É–ø—É—î–º–æ –ø–æ –ø–∞—Ä–∞–º
        pairs_stats = {}
        for result in results:
            if result['success']:
                symbol = result['symbol']
                if symbol not in pairs_stats:
                    pairs_stats[symbol] = {'loaded': 0, 'skipped': 0, 'timeframes': 0}
                
                pairs_stats[symbol]['loaded'] += result['loaded']
                pairs_stats[symbol]['skipped'] += result['skipped']
                pairs_stats[symbol]['timeframes'] += 1
        
        for symbol, stats in pairs_stats.items():
            self.logger.info(f"   {symbol:<8}: {stats['timeframes']} —Ç–∞–π–º—Ñ—Ä–µ–π–º—ñ–≤, +{stats['loaded']:,} —Å–≤—ñ—á–æ–∫, ~{stats['skipped']:,} –¥—É–±–ª—ñ–≤")
        
        self.logger.info("="*80)
        self.logger.info("üéâ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä–∏—á–Ω–∏—Ö –¥–∞–Ω–∏—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    try:
        print("üöÄ –ó–∞–≤–∞–Ω—Ç–∞–∂—É–≤–∞—á —ñ—Å—Ç–æ—Ä–∏—á–Ω–∏—Ö –¥–∞–Ω–∏—Ö –¥–ª—è –±–∞–≥–∞—Ç–æ–ø–∞—Ä–Ω–æ—ó —Å–∏—Å—Ç–µ–º–∏")
        print(f"üìÖ –ü–µ—Ä—ñ–æ–¥: {START_DATE} - {END_DATE}")
        print(f"üî¢ –¢–∞–π–º—Ñ—Ä–µ–π–º—ã: {', '.join(ACTIVE_TIMEFRAMES)}")
        print(f"üí± –ü–∞—Ä–∏: {', '.join([p['symbol'] for p in get_enabled_pairs()])}")
        print()
        
        # –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∑–∞–ø—É—Å–∫—É
        response = input("–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è? (y/N): ")
        if response.lower() != 'y':
            print("‚ùå –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ")
            return
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–≤–∞–Ω—Ç–∞–∂—É–≤–∞—á
        loader = HistoricalDataLoader()
        
        # –ü—ñ–¥–∫–ª—é—á–∞—î–º–æ—Å—è –¥–æ –ë–î
        if not loader.connect_to_database():
            print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö")
            return
        
        # –ó–∞–ø—É—Å–∫–∞—î–º–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
        start_time = time.time()
        results = loader.run_parallel_loading()
        total_time = time.time() - start_time
        
        # –î—Ä—É–∫—É—î–º–æ –∑–≤—ñ—Ç
        loader.print_final_report(results)
        loader.logger.info(f"‚è±Ô∏è –ó–∞–≥–∞–ª—å–Ω–∏–π —á–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è: {total_time:.1f} —Å–µ–∫—É–Ω–¥")
        
        # –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –∑'—î–¥–Ω–∞–Ω–Ω—è
        if loader.db_connection:
            loader.db_connection.close()
        
    except KeyboardInterrupt:
        print("\nüõë –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–µ—Ä–µ—Ä–≤–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
    except Exception as e:
        print(f"üí• –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main() 