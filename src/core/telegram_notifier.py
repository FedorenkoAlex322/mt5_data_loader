"""
Telegram notification system
"""

import time
from typing import Optional, Dict, Any
import requests
from requests.adapters import HTTPAdapter
from urllib3.util.retry import Retry

from ..config.settings import TelegramConfig
from ..config.constants import NotificationType
from ..utils.logging import get_logger


class TelegramNotificationError(Exception):
    """–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram"""
    pass


class TelegramNotifier:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram"""
    
    def __init__(self, config: TelegramConfig):
        self.config = config
        self.logger = get_logger(__name__)
        self.session = self._create_session()
    
    def _create_session(self) -> requests.Session:
        """–°–æ–∑–¥–∞–Ω–∏–µ HTTP —Å–µ—Å—Å–∏–∏ —Å retry –ª–æ–≥–∏–∫–æ–π"""
        session = requests.Session()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ retry —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        retry_strategy = Retry(
            total=self.config.retry_attempts,
            status_forcelist=[429, 500, 502, 503, 504],
            method_whitelist=["HEAD", "GET", "POST"],
            backoff_factor=1
        )
        
        adapter = HTTPAdapter(max_retries=retry_strategy)
        session.mount("http://", adapter)
        session.mount("https://", adapter)
        
        return session
    
    def send_message(
        self, 
        message: str, 
        topic_type: str = "system",
        parse_mode: str = "HTML"
    ) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
        
        Args:
            message: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            topic_type: –¢–∏–ø —Ç–æ–ø–∏–∫–∞ (system, trades, analysis, etc.)
            parse_mode: –†–µ–∂–∏–º –ø–∞—Ä—Å–∏–Ω–≥–∞ (HTML, Markdown)
            
        Returns:
            True –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            topic_id = self.config.topics.get(topic_type, self.config.topics.get("system", None))
            
            url = f"https://api.telegram.org/bot{self.config.bot_token}/sendMessage"
            
            data = {
                'chat_id': self.config.chat_id,
                'text': message,
                'parse_mode': parse_mode
            }
            
            if topic_id:
                data['message_thread_id'] = topic_id
            
            self.logger.debug(
                "Sending Telegram message",
                topic_type=topic_type,
                topic_id=topic_id,
                message_length=len(message)
            )
            
            response = self.session.post(url, json=data, timeout=10)
            
            if response.status_code == 200:
                result = response.json()
                if result.get('ok'):
                    self.logger.debug("Telegram message sent successfully")
                    return True
                else:
                    error_msg = result.get('description', 'Unknown error')
                    self.logger.error(
                        "Telegram API error",
                        error=error_msg,
                        status_code=response.status_code
                    )
                    return False
            else:
                self.logger.error(
                    "Failed to send Telegram message",
                    status_code=response.status_code,
                    response_text=response.text
                )
                return False
                
        except requests.exceptions.RequestException as e:
            self.logger.error("Network error sending Telegram message", error=str(e))
            return False
        except Exception as e:
            self.logger.error("Unexpected error sending Telegram message", error=str(e))
            return False
    
    def send_system_start(self, system_info: Dict[str, Any]) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ —Å–∏—Å—Ç–µ–º—ã"""
        message = (
            f"üöÄ <b>–°–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞</b>\n"
            f"üïê {system_info.get('start_time', 'N/A')}\n"
            f"üí± –í–∞–ª—é—Ç–Ω—ã–µ –ø–∞—Ä—ã: {system_info.get('pairs', 'N/A')}\n"
            f"üìä –¢–∞–π–º—Ñ—Ä–µ–π–º—ã: {system_info.get('timeframes', 'N/A')}\n"
            f"üî¢ –ö–æ–º–±–∏–Ω–∞—Ü–∏–π: {system_info.get('combinations_count', 'N/A')}\n"
            f"‚è±Ô∏è –†–µ–∂–∏–º: {system_info.get('mode', 'N/A')}"
        )
        
        return self.send_message(message, "system")
    
    def send_system_stop(self, system_info: Dict[str, Any]) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Å–∏—Å—Ç–µ–º—ã"""
        message = (
            f"üõë <b>–°–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞</b>\n"
            f"üïê {system_info.get('stop_time', 'N/A')}\n"
            f"‚è∞ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {system_info.get('uptime', 'N/A')}\n"
            f"üîÑ –¶–∏–∫–ª–æ–≤: {system_info.get('cycles', 'N/A')}\n"
            f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: {system_info.get('successful_cycles', 'N/A')}\n"
            f"üíæ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å–≤–µ—á–µ–π: {system_info.get('candles_count', 'N/A')}\n"
            f"‚ùå –û—à–∏–±–æ–∫: {system_info.get('errors_count', 'N/A')}"
        )
        
        return self.send_message(message, "system")
    
    def send_error_notification(self, error_info: Dict[str, Any]) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ"""
        message = (
            f"‚ùå <b>–û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã</b>\n"
            f"üïê {error_info.get('timestamp', 'N/A')}\n"
            f"üîç –¢–∏–ø: {error_info.get('error_type', 'N/A')}\n"
            f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {error_info.get('message', 'N/A')}\n"
            f"üìç –ö–æ–º–ø–æ–Ω–µ–Ω—Ç: {error_info.get('component', 'N/A')}"
        )
        
        return self.send_message(message, "system")
    
    def send_heartbeat(self, stats: Dict[str, Any]) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å heartbeat —Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π"""
        message = (
            f"üíì <b>Heartbeat</b>\n"
            f"üïê {stats.get('timestamp', 'N/A')}\n"
            f"‚è∞ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {stats.get('uptime', 'N/A')}\n"
            f"üîÑ –¶–∏–∫–ª–æ–≤: {stats.get('cycles', 'N/A')}\n"
            f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: {stats.get('successful_cycles', 'N/A')}\n"
            f"üíæ –°–≤–µ—á–µ–π –∑–∞ —á–∞—Å: {stats.get('candles_last_hour', 'N/A')}\n"
            f"üìä –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ä: {stats.get('active_pairs', 'N/A')}"
        )
        
        return self.send_message(message, "system")
    
    def send_update_notification(self, update_info: Dict[str, Any]) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö"""
        message = (
            f"üìà <b>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö</b>\n"
            f"üïê {update_info.get('timestamp', 'N/A')}\n"
            f"‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {update_info.get('duration', 'N/A')}\n"
            f"üíæ –ù–æ–≤—ã—Ö —Å–≤–µ—á–µ–π: {update_info.get('new_candles', 'N/A')}\n"
            f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –ø–∞—Ä: {update_info.get('successful_pairs', 'N/A')}\n"
            f"‚ùå –û—à–∏–±–æ–∫: {update_info.get('errors', 'N/A')}"
        )
        
        return self.send_message(message, "system")
    
    def send_trade_notification(self, trade_info: Dict[str, Any]) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–¥–µ–ª–∫–µ"""
        direction_emoji = "üìà" if trade_info.get('direction') == 'BUY' else "üìâ"
        
        message = (
            f"{direction_emoji} <b>–°–¥–µ–ª–∫–∞ {trade_info.get('direction', 'N/A')}</b>\n"
            f"üí± {trade_info.get('symbol', 'N/A')}\n"
            f"üí∞ –û–±—ä–µ–º: {trade_info.get('volume', 'N/A')}\n"
            f"üíµ –¶–µ–Ω–∞: {trade_info.get('price', 'N/A')}\n"
            f"üìä –¢–∞–π–º—Ñ—Ä–µ–π–º: {trade_info.get('timeframe', 'N/A')}\n"
            f"üïê –í—Ä–µ–º—è: {trade_info.get('timestamp', 'N/A')}"
        )
        
        return self.send_message(message, "trades")
    
    def send_analysis_notification(self, analysis_info: Dict[str, Any]) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∞–Ω–∞–ª–∏–∑–µ"""
        message = (
            f"üìä <b>–ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞</b>\n"
            f"üí± {analysis_info.get('symbol', 'N/A')}\n"
            f"üìà –°–∏–≥–Ω–∞–ª: {analysis_info.get('signal', 'N/A')}\n"
            f"üìä –¢–∞–π–º—Ñ—Ä–µ–π–º: {analysis_info.get('timeframe', 'N/A')}\n"
            f"üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {analysis_info.get('confidence', 'N/A')}%\n"
            f"üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {analysis_info.get('comment', 'N/A')}\n"
            f"üïê –í—Ä–µ–º—è: {analysis_info.get('timestamp', 'N/A')}"
        )
        
        return self.send_message(message, "analysis")
    
    def test_connection(self) -> bool:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram API"""
        try:
            url = f"https://api.telegram.org/bot{self.config.bot_token}/getMe"
            response = self.session.get(url, timeout=10)
            
            if response.status_code == 200:
                result = response.json()
                if result.get('ok'):
                    bot_info = result.get('result', {})
                    self.logger.info(
                        "Telegram connection test successful",
                        bot_name=bot_info.get('first_name'),
                        bot_username=bot_info.get('username')
                    )
                    return True
            
            self.logger.error(
                "Telegram connection test failed",
                status_code=response.status_code,
                response_text=response.text
            )
            return False
            
        except Exception as e:
            self.logger.error("Telegram connection test failed", error=str(e))
            return False
    
    def close(self) -> None:
        """–ó–∞–∫—Ä—ã—Ç—å HTTP —Å–µ—Å—Å–∏—é"""
        if self.session:
            self.session.close()
            self.logger.debug("Telegram session closed")
    
    def __enter__(self):
        return self
    
    def __exit__(self, exc_type, exc_val, exc_tb):
        self.close() 