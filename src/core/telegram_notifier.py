"""
Telegram notification system
"""

import requests
import time
from typing import Dict, Any, Optional
from urllib.parse import urljoin

from ..utils.logging import get_logger


class TelegramNotificationError(Exception):
    """–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram"""
    pass


class TelegramNotifier:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram"""
    
    def __init__(self, config: Dict[str, Any]):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        
        Args:
            config: –°–ª–æ–≤–∞—Ä—å —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π Telegram
        """
        self.config = config
        self.logger = get_logger(__name__)
        self.base_url = "https://api.telegram.org/bot{}/".format(config.get('bot_token', ''))
        self.chat_id = config.get('chat_id')
        self.topics = config.get('topics', {})
        self.retry_attempts = config.get('retry_attempts', 3)
        self.session = self._create_session()
    
    def _create_session(self) -> requests.Session:
        """–°–æ–∑–¥–∞–Ω–∏–µ HTTP —Å–µ—Å—Å–∏–∏ —Å retry –ª–æ–≥–∏–∫–æ–π"""
        session = requests.Session()
        session.headers.update({
            'Content-Type': 'application/json',
            'User-Agent': 'TradingSystem/1.0'
        })
        return session
    
    def send_message(self, message: str, topic: str = "system") -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
        
        Args:
            message: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            topic: –¢–µ–º–∞ —Å–æ–æ–±—â–µ–Ω–∏—è (system, trades, analysis, etc.)
            
        Returns:
            True –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
        """
        if not self.config.get('bot_token') or not self.chat_id:
            self.logger.warning("Telegram not configured, skipping message")
            return False
        
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º thread_id –¥–ª—è —Ç–æ–ø–∏–∫–∞
            thread_id = self.topics.get(topic, None)
            
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
            params = {
                'chat_id': self.chat_id,
                'text': message,
                'parse_mode': 'HTML'
            }
            
            if thread_id:
                params['message_thread_id'] = thread_id
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å retry –ª–æ–≥–∏–∫–æ–π
            for attempt in range(self.retry_attempts):
                try:
                    response = self.session.post(
                        urljoin(self.base_url, "sendMessage"),
                        json=params,
                        timeout=10
                    )
                    response.raise_for_status()
                    
                    self.logger.debug(
                        "Message sent successfully",
                        topic=topic,
                        message_length=len(message)
                    )
                    return True
                    
                except requests.exceptions.RequestException as e:
                    if attempt < self.retry_attempts - 1:
                        self.logger.warning(
                            f"Failed to send message (attempt {attempt + 1}/{self.retry_attempts})",
                            error=str(e)
                        )
                        time.sleep(2 ** attempt)  # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                    else:
                        raise
            
        except Exception as e:
            self.logger.error(
                "Failed to send Telegram message",
                topic=topic,
                error=str(e)
            )
            raise TelegramNotificationError(f"Failed to send message: {e}")
    
    def send_system_start(self, system_info: Dict[str, Any]) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–ø—É—Å–∫–µ —Å–∏—Å—Ç–µ–º—ã"""
        message = (
            f"üöÄ <b>–°–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞</b>\n"
            f"üïê {system_info.get('start_time', 'N/A')}\n"
            f"üí± –ü–∞—Ä: {system_info.get('pairs', 'N/A')}\n"
            f"üìä –¢–∞–π–º—Ñ—Ä–µ–π–º—ã: {system_info.get('timeframes', 'N/A')}\n"
            f"üî¢ –ö–æ–º–±–∏–Ω–∞—Ü–∏–π: {system_info.get('combinations_count', 'N/A')}\n"
            f"‚ö° –†–µ–∂–∏–º: {system_info.get('mode', 'N/A')}"
        )
        return self.send_message(message, "system")
    
    def send_system_stop(self, system_info: Dict[str, Any]) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Å–∏—Å—Ç–µ–º—ã"""
        message = (
            f"üõë <b>–°–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞</b>\n"
            f"üïê {system_info.get('stop_time', 'N/A')}\n"
            f"‚è±Ô∏è –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {system_info.get('uptime', 'N/A')}\n"
            f"üîÑ –¶–∏–∫–ª–æ–≤: {system_info.get('cycles', 'N/A')}\n"
            f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: {system_info.get('successful_cycles', 'N/A')}\n"
            f"üíæ –°–≤–µ—á–µ–π: {system_info.get('candles_count', 'N/A')}\n"
            f"‚ùå –û—à–∏–±–æ–∫: {system_info.get('errors_count', 'N/A')}"
        )
        return self.send_message(message, "system")
    
    def send_error_notification(self, error_info: Dict[str, Any]) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ"""
        message = (
            f"‚ùå <b>–û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã</b>\n"
            f"üïê {error_info.get('timestamp', 'N/A')}\n"
            f"üîß –ö–æ–º–ø–æ–Ω–µ–Ω—Ç: {error_info.get('component', 'N/A')}\n"
            f"üìù –¢–∏–ø: {error_info.get('error_type', 'N/A')}\n"
            f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: {error_info.get('message', 'N/A')}"
        )
        return self.send_message(message, "system")
    
    def send_heartbeat(self, stats: Dict[str, Any]) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ heartbeat —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        message = (
            f"üíì <b>Heartbeat</b>\n"
            f"üïê {stats.get('timestamp', 'N/A')}\n"
            f"‚è±Ô∏è –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {stats.get('uptime', 'N/A')}\n"
            f"üîÑ –¶–∏–∫–ª–æ–≤: {stats.get('cycles', 'N/A')}\n"
            f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: {stats.get('successful_cycles', 'N/A')}\n"
            f"üíæ –°–≤–µ—á–µ–π –∑–∞ —á–∞—Å: {stats.get('candles_last_hour', 'N/A')}\n"
            f"üí± –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ä: {stats.get('active_pairs', 'N/A')}"
        )
        return self.send_message(message, "system")
    
    def send_update_notification(self, update_info: Dict[str, Any]) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö"""
        message = (
            f"üìà <b>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö</b>\n"
            f"üïê {update_info.get('timestamp', 'N/A')}\n"
            f"‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {update_info.get('duration', 'N/A')}\n"
            f"üíæ –ù–æ–≤—ã—Ö —Å–≤–µ—á–µ–π: {update_info.get('new_candles', 'N/A')}\n"
            f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –ø–∞—Ä: {update_info.get('successful_pairs', 'N/A')}\n"
            f"‚ùå –û—à–∏–±–æ–∫: {update_info.get('errors', 'N/A')}"
        )
        return self.send_message(message, "system")
    
    def send_trade_notification(self, trade_info: Dict[str, Any]) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–¥–µ–ª–∫–µ"""
        message = (
            f"üí∞ <b>–°–¥–µ–ª–∫–∞ {trade_info.get('action', 'N/A')}</b>\n"
            f"üí± {trade_info.get('symbol', 'N/A')}\n"
            f"üìä –û–±—ä–µ–º: {trade_info.get('volume', 'N/A')}\n"
            f"üíµ –¶–µ–Ω–∞: {trade_info.get('price', 'N/A')}\n"
            f"üìà –ü—Ä–∏–±—ã–ª—å: {trade_info.get('profit', 'N/A')}\n"
            f"üïê {trade_info.get('timestamp', 'N/A')}"
        )
        return self.send_message(message, "trades")
    
    def send_analysis_notification(self, analysis_info: Dict[str, Any]) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∞–Ω–∞–ª–∏–∑–µ"""
        message = (
            f"üìä <b>–ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞</b>\n"
            f"üí± {analysis_info.get('symbol', 'N/A')}\n"
            f"üìà –°–∏–≥–Ω–∞–ª: {analysis_info.get('signal', 'N/A')}\n"
            f"üí™ –°–∏–ª–∞: {analysis_info.get('strength', 'N/A')}\n"
            f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {analysis_info.get('description', 'N/A')}\n"
            f"üïê {analysis_info.get('timestamp', 'N/A')}"
        )
        return self.send_message(message, "analysis")
    
    def test_connection(self) -> bool:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram"""
        try:
            if not self.config.get('bot_token') or not self.chat_id:
                return False
            
            response = self.session.get(
                urljoin(self.base_url, "getMe"),
                timeout=10
            )
            response.raise_for_status()
            
            bot_info = response.json()
            if bot_info.get('ok'):
                self.logger.info(
                    "Telegram connection test successful",
                    bot_name=bot_info['result'].get('first_name', 'Unknown')
                )
                return True
            
            return False
            
        except Exception as e:
            self.logger.error("Telegram connection test failed", error=str(e))
            return False
    
    def close(self) -> None:
        """–ó–∞–∫—Ä—ã—Ç–∏–µ HTTP —Å–µ—Å—Å–∏–∏"""
        try:
            self.session.close()
            self.logger.info("Telegram notifier session closed")
        except Exception as e:
            self.logger.error("Error closing Telegram session", error=str(e))
    
    def __enter__(self):
        return self
    
    def __exit__(self, exc_type, exc_val, exc_tb):
        self.close() 